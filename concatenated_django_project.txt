=== ./authentication/__init__.py ===



=== ./authentication/models/__init__.py ===
from .AuthUser import AuthUser


=== ./authentication/models/AuthUser.py ===
from django.db import models
from django.contrib.auth.models import AbstractUser

# Create your models here.
class AuthUser(AbstractUser):
  user_role = [
    ( "admin", "Admin"),
    ( "instructor", "Instructor"),
    ( "student", "Student"),
  ]

  role = models.CharField(max_length=25, choices=user_role, default="student")
  phone_number = models.CharField(max_length=20)


=== ./authentication/apps.py ===
from django.apps import AppConfig


class AuthenticationConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'authentication'



=== ./authentication/controllers/__init__.py ===



=== ./authentication/controllers/auth_controller.py ===
from django.shortcuts import render

# Create your views here.



=== ./authentication/templates/__init__.py ===



=== ./authentication/admin.py ===
from django.contrib import admin

# Register your models here.



=== ./authentication/tests.py ===
from django.test import TestCase

# Create your tests here.



=== ./grading/__init__.py ===



=== ./grading/models/__init__.py ===
from .department import Department
from .course import Course
from .instructor import Instructor
from .student import Student
from .studentCourseEnrollment import StudentCourseEnrollment


=== ./grading/models/student.py ===
from django.db import models
from authentication.models.AuthUser import AuthUser
from grading.models.department import Department

# Create your models here.

class Student(models.Model):
  """
  Student class
  """
  student_id = models.AutoField(primary_key=True)
  date_of_birth = models.DateField()

  # Attributes relating to authUser class
  # first_name = models.CharField(max_length=255)
  # last_name = models.CharField(max_length=255)
  # email = models.EmailField(unique=True)
  # phone_number = models.CharField(max_length=20)

  major = models.ForeignKey(Department, on_delete=models.CASCADE, related_name="major")
  user = models.OneToOneField(
    AuthUser,
    on_delete=models.CASCADE,
    related_name="student_profile",
  )

  def __str__(self):
    return f"{self.first_name} {self.last_name}"

  def __repr__(self):
    """
    String representation for CSV parsing
    """
    attributes = ",".join([str(value) for value in vars(self).values()][1:])
    return attributes

  class Meta:
    db_table="students"


=== ./grading/models/instructor.py ===
from django.db import models
from grading.models.department import Department
from authentication.models.AuthUser import AuthUser

class Instructor(models.Model):
  instructor_id = models.AutoField(primary_key=True)

  # first_name = models.CharField(max_length=255)
  # last_name = models.CharField(max_length=255)
  # email = models.EmailField(unique=True)
  # phone_number = models.CharField(max_length=50)

  department = models.ForeignKey(Department, on_delete=models.SET_NULL, null=True, related_name="instructors")
  user = models.OneToOneField(
    AuthUser,
    on_delete=models.CASCADE,
    related_name="instructor_profile",
  )

  def __str__(self):
    return f"{self.first_name} {self.last_name}"

  def __repr__(self):
    """
    String representation for CSV parsing
    """
    attributes = ",".join([str(value) for value in vars(self).values()][1:])
    return attributes

  class Meta:
    db_table="instructors"


=== ./grading/models/all_concatenated.py ===

# --- Start of course.py ---

from django.db import models
from grading.models.department import Department
from grading.models.instructor import Instructor
from grading.models.student import Student

class Course(models.Model):
  course_id = models.AutoField(primary_key=True)
  course_name = models.CharField(max_length=255, unique=True)
  course_code = models.CharField(max_length=20, unique=True)
  # description = models.TextField()
  credits = models.IntegerField()
  studentEnrollment = models.ManyToManyField(Student, through="StudentCourseEnrollment")
  department = models.ForeignKey(Department, on_delete=models.CASCADE, related_name="courses")
  instructors = models.ManyToManyField(Instructor, related_name="courses")

  def __str__(self):
      return self.course_name

  def __repr__(self):
    """
    String representation for CSV parsing
    """
    attributes = ",".join([str(value) for value in vars(self).values()])
    return attributes
# --- End of course.py ---


# --- Start of department.py ---

from django.db import models

class Department(models.Model):
  department_id = models.AutoField(primary_key=True)
  name = models.CharField(max_length=255, unique=True)
  head_of_department = models.CharField(max_length=255)

  def __str__(self):
    return self.name

  def __repr__(self):
    """
    String representation for CSV parsing
    """
    attributes = ",".join([str(value) for value in vars(self).values()][1:])
    return attributes
# --- End of department.py ---


# --- Start of instructor.py ---

from django.db import models
from grading.models.department import Department

class Instructor(models.Model):
  instructor_id = models.AutoField(primary_key=True)
  first_name = models.CharField(max_length=255)
  last_name = models.CharField(max_length=255)
  email = models.EmailField(unique=True)
  phone_number = models.CharField(max_length=50)
  department = models.ForeignKey(Department, on_delete=models.SET_NULL, null=True, related_name="instructors")

  def __str__(self):
    return f"{self.first_name} {self.last_name}"

  def __repr__(self):
    """
    String representation for CSV parsing
    """
    attributes = ",".join([str(value) for value in vars(self).values()][1:])
    return attributes
# --- End of instructor.py ---


# --- Start of student.py ---

from django.db import models

# Create your models here.

class Student(models.Model):
  """
  Student class
  """
  student_id = models.AutoField(primary_key=True)
  first_name = models.CharField(max_length=255)
  last_name = models.CharField(max_length=255)
  email = models.EmailField(unique=True)
  phone_number = models.CharField(max_length=20)
  major = models.CharField(max_length=255)
  date_of_birth = models.DateField()

  def __str__(self):
    return f"{self.first_name} {self.last_name}"

  def __repr__(self):
    """
    String representation for CSV parsing
    """
    attributes = ",".join([str(value) for value in vars(self).values()][1:])
    return attributes
# --- End of student.py ---


# --- Start of studentCourseEnrollment.py ---

from django.db import models
from django.db.models import UniqueConstraint
from grading.models.student import Student
from grading.models.course import Course
from grading.models.instructor import Instructor

class StudentCourseEnrollment(models.Model):
  student = models.ForeignKey(Student, on_delete=models.CASCADE, related_name="enrollments")
  course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name="enrollments")
  instructor = models.ForeignKey(Instructor, on_delete=models.CASCADE, related_name="enrollments")
  date = models.DateField()
  semester = models.CharField(max_length=255)
  academic_year = models.IntegerField()
  grade = models.DecimalField(max_digits=4, decimal_places=2)

  def __repr__(self):
    attributes = ",".join([str(value) for value in vars(self).values()][1:])
    return attributes

  class Meta:
    unique_together = ('student', 'course')
    constraints: [
      UniqueConstraint(
        fields=[ 'student', 'course' ],
        name="uniqueEnrollment"
      )
    ]
# --- End of studentCourseEnrollment.py ---




=== ./grading/models/seed.py ===
from faker import Faker
from grading.models.student import Student
from grading.models.department import Department
from grading.models.course import Course
from grading.models.instructor import Instructor
from grading.models.studentCourseEnrollment import StudentCourseEnrollment
from authentication.models.AuthUser import AuthUser

import datetime
import random

# Initialize Faker
fake = Faker()

# Define function to generate random number within a range (inclusive)
def random_within_range(low, high):
    return random.randint(low, high)

fake_department = {
    "Computer Science": [
        "Data Structures and Algorithms",
        "Operating Systems",
        "Artificial Intelligence",
        "Database Management Systems",
        "Web Development and Technologies",

    ],
    "Mechanical Engineering": [
        "Thermodynamics and Fluid Dynamics",
        "Fluid Mechanics",
        "Materials Science and Engineering",
        "Computer-Aided Design",
        "Robotics and Automation",

    ],
    "English Literature": [
        "Shakespearean Drama",
        "Modernist Literature",
        "Introduction to Literary Theory",
        "Creative Writing and Poetry",
        "World Literature in Translation",

    ],
    "Business Administration": [
        "Principles of Marketing",
        "Financial Accounting",
        "Organizational Behavior",
        "Business Ethics and Corporate Governance",
        "Entrepreneurship and Innovation",

    ],
    "Psychology Department": [
        "Introduction to Psychology",
        "Cognitive Psychology",
        "Abnormal Psychology",
        "Social Psychology",
        "Research Methods in Psychology",

    ],
 }

# Generate Departments
departmentResult = Department.objects.all()
departments = []

if len(departmentResult) == 0:
    for key in fake_department.keys():
        department = Department(
            name=key, head_of_department=fake.name()
        )
        departments.append(department)
    Department.objects.bulk_create(departments)  # Bulk create departments

# print(departments)
# for dept in departments:
#   print(dept.department_id, dept.name, dept.head_of_department)

# print(Department.objects.all().first().__repr__())

departments = Department.objects.all()

instructorResult = Instructor.objects.all()
instructors = []
instructor_profiles = []
# Generate Instructors
if len(instructorResult) == 0:
    for department in departments:
        instructor_count = random_within_range(15, 25)
        for _ in range(instructor_count):
            first_name = fake.first_name()
            last_name = fake.last_name()
            password=first_name
            username=first_name + fake.random.choice(['_', '-', '@', '$', '^', '*', '%', '#']) + last_name

            instructor_profile = AuthUser.objects.create_user(
                role='instructor',
                first_name=first_name,
                email=fake.email(),
                password=password,
                last_name=last_name,
                username=username,
                phone_number=fake.lexify(text=('01?-'), letters="0125") + fake.lexify(text=('????-????'), letters="0123456789"),
            )
            # AuthUser.save(instructor_profile)
            instructor_profiles.append(instructor_profile)

            instructor = Instructor(
                user=instructor_profile,
                department=department,
            )
            instructors.append(instructor)

    # AuthUser.objects.bulk_create(instructor_profiles)  # Bulk create instructor_profiles
    Instructor.objects.bulk_create(instructors)  # Bulk create instructors

# # print( instructors )
# for instructor in instructors:
#   print(instructor.instructor_id, instructor.first_name, instructor.last_name, instructor.email, instructor.department, instructor.phone_number)
#   print('-'*30)


# Generate Courses (considering department and instructor relationships)
courseResult = Course.objects.all()
courseArray = []
instructors = Instructor.objects.all()

if len(courseResult) == 0:
    for dep, courses in fake_department.items():
        for index, course in enumerate(courses):
            course_code_initials = ''.join([name[0] for name in course.split(' ') if name[0].isupper()])
            result_department = Department.objects.get(name=dep)

            courseObject = Course(
                course_name=fake_department[dep][index],
                # course_code=fake.unique.lexify(text="CS###"),
                course_code=fake.unique.lexify(text=f"{course_code_initials}???", letters="0123456789"),
                # description=fake.text(),
                credits=random_within_range(1, 5),
                department=result_department,
            )
            courseArray.append(courseObject)

    Course.objects.bulk_create(courseArray)  # Bulk create courses with assigned instructors

    for index, inst in enumerate(instructors):
        courses = list(inst.department.courses.all())
        inst.courses.set(random.sample(courses, k=random.randint(1, 3)))
        # print(inst.user.username)
        # print([course.course_name for course in inst.courses.all()])

    # courses = Course.objects.all()
    # # print(courses)
    # for index, course in enumerate(courses):
    #     print(course)
    #     print([instructor for instructor in course.instructors.all()])


# print(courseArray)

# Generate Students
studentResult = Student.objects.all()
students = []
student_profiles = []
enrollments = []
if len(studentResult) == 0:
    for department in Department.objects.all():
        courses = list(department.courses.all())

        for _ in range(random.randint(150, 250)):
            first_name = fake.first_name()
            last_name=fake.last_name()
            password = first_name
            username = first_name + fake.random.choice(['_', '-', '@', '$', '^', '*', '%', '#']) + fake.random.choice(['_', '-', '@', '$', '^', '*', '%', '#']) + last_name + fake.random.choice(['_', '-', '@', '$', '^', '*', '%', '#'])

            student_profile = AuthUser.objects.create_user(
                first_name=first_name,
                last_name=last_name,
                password=first_name,
                username=username,
                email=fake.email(),
                phone_number=fake.lexify(text=('01?-'), letters="0125") + fake.lexify(text=('????-????'), letters="0123456789"),
            )
            # AuthUser.save(student_profile)

            student = Student.objects.create(
                user=student_profile,
                major=department,
                date_of_birth=fake.date_between(start_date=datetime.date(1997, 1, 1) , end_date=datetime.date(2007, 12, 30)),
            )

            for course in courses:
                float_num = random.uniform(0,1)
                probability = round(float_num)
                # print(course.instructor)

                if probability == 0:
                    continue

                instructors = list(course.instructors.all())
                fake_year = random_within_range(2020, 2024)
                fake_semester=fake.random.choice(["Fall", "Spring", "Summer"]),

                if fake_semester == "fall":
                    fake_date = fake.date_between(start_date=datetime.date(fake_year, 8, 1) , end_date=datetime.date(fake_year, 10, 15))
                elif fake_semester == "spring":
                    fake_date = fake.date_between(start_date=datetime.date(fake_year, 1, 1) , end_date=datetime.date(fake_year, 2, 20))
                else:
                    fake_date = fake.date_between(start_date=datetime.date(fake_year, 6, 1) , end_date=datetime.date(fake_year, 7, 15))

                fake_grade=round(random.uniform(60, 99), 2)
                # print(fake_grade)

                enrollment = StudentCourseEnrollment.objects.create(
                    student=student,
                    course=course,
                    instructor=random.choice(instructors),
                    date=fake_date,
                    semester=fake_semester,
                    academic_year=fake_year,
                    grade=fake_grade
                )
                enrollments.append(enrollments)
            student_profiles.append(student_profile)
            students.append(student)
    # Student.objects.bulk_create(students)  # Bulk create students
    # StudentCourseEnrollment.objects.bulk_create(enrollments)  # Bulk create student enrollments

print(f"Generated {len(departments)} Departments")
print(f"Generated {len(instructors)} Instructors")
print(f"Generated {len(students)} Students")
print(f"Generated {len(instructor_profiles)} Instructor profiles")
print(f"Generated {len(student_profiles)} Student profiles")
print(f"Generated {len(courseArray)} Courses")
print(f"Generated {len(enrollments)} Enrollments")


=== ./grading/models/department.py ===
from django.db import models

class Department(models.Model):
  department_id = models.AutoField(primary_key=True)
  name = models.CharField(max_length=255, unique=True)
  head_of_department = models.CharField(max_length=255)

  def __str__(self):
    return self.name

  def __repr__(self):
    """
    String representation for CSV parsing
    """
    attributes = ",".join([str(value) for value in vars(self).values()][1:])
    return attributes

  class Meta:
    db_table="departments"


=== ./grading/models/studentCourseEnrollment.py ===
from django.db import models
from django.db.models import UniqueConstraint
from grading.models.student import Student
from grading.models.course import Course
from grading.models.instructor import Instructor

class StudentCourseEnrollment(models.Model):
  student = models.ForeignKey(Student, on_delete=models.CASCADE, related_name="enrollments")
  course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name="enrollments")
  instructor = models.ForeignKey(Instructor, on_delete=models.CASCADE, related_name="enrollments")
  date = models.DateField()
  semester = models.CharField(max_length=255)
  academic_year = models.IntegerField()
  grade = models.DecimalField(max_digits=4, decimal_places=2)

  def __repr__(self):
    attributes = ",".join([str(value) for value in vars(self).values()][1:])
    return attributes

  class Meta:
    unique_together = ('student', 'course')
    constraints: [
      UniqueConstraint(
        fields=[ 'student', 'course' ],
        name="uniqueEnrollment"
      )
    ]
    db_table="studentCourseEnrollments"


=== ./grading/models/course.py ===
from django.db import models
from grading.models.department import Department
from grading.models.instructor import Instructor
from grading.models.student import Student

class Course(models.Model):
  course_id = models.AutoField(primary_key=True)
  course_name = models.CharField(max_length=255, unique=True)
  course_code = models.CharField(max_length=20, unique=True)
  # description = models.TextField()
  credits = models.IntegerField()

  studentEnrollment = models.ManyToManyField(Student, through="StudentCourseEnrollment")
  department = models.ForeignKey(Department, on_delete=models.CASCADE, related_name="courses")
  instructors = models.ManyToManyField(Instructor, related_name="courses")

  def __str__(self):
      return self.course_name

  def __repr__(self):
    """
    String representation for CSV parsing
    """
    attributes = ",".join([str(value) for value in vars(self).values()])
    return attributes

  class Meta:
    db_table="courses"


=== ./grading/apps.py ===
from django.apps import AppConfig


class GradingConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'grading'



=== ./grading/controllers/__init__.py ===



=== ./grading/controllers/students_controller.py ===
from django.shortcuts import render
from django.http import HttpResponse
from grading.models.student import Student

def getAllStudents(request):
  allStudents = Student.objects.all()
  return render(request, 'grading/students/list.html', { 'allStudents': allStudents.values() })


=== ./grading/templates/__init__.py ===



=== ./grading/admin.py ===
from django.contrib import admin

# Register your models here.



=== ./grading/urls.py ===
"""
URL configuration for grading app.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from grading.controllers.students_controller import getAllStudents

urlpatterns = [
  path('', getAllStudents, name='all-students'),
]


=== ./grading/views.py ===
from django.shortcuts import render

# Create your views here.



=== ./grading/tests.py ===
from django.test import TestCase

# Create your tests here.



=== ./manage.py ===
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'GradingSystem.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()



=== ./GradingSystem/settings.py ===
"""
Django settings for GradingSystem project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_c&wknet7b08#zyjx6fe76lg5^x7y2=v9ugm5h^dw!i&stg15h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'grading',
    'authentication'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'GradingSystem.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'GradingSystem.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'Grading_system',
        'USER': 'grader',
        'PASSWORD': 'password',
        'HOST': '127.0.0.1',  # or 'localhost'
        'PORT': 3306,       # Default MySQL port
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'authentication.AuthUser'


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # Replace BASE_DIR with your project's base directory

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



=== ./GradingSystem/__init__.py ===



=== ./GradingSystem/asgi.py ===
"""
ASGI config for GradingSystem project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'GradingSystem.settings')

application = get_asgi_application()



=== ./GradingSystem/wsgi.py ===
"""
WSGI config for GradingSystem project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'GradingSystem.settings')

application = get_wsgi_application()



=== ./GradingSystem/urls.py ===
"""
URL configuration for GradingSystem project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('student/', include('grading.urls') ),
]



=== ./all.py ===



